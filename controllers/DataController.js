const Entry = require('../models').Entry;
const Passing = require('../models').Passing;

function randomDate(start, end) {
    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}

const generateEntry = async function (req, res, next) {
    let data = req.body;
    let entries = [];

    for (let i = 0; i < data.entryNumber; i++) {
        entries.push({
            persons: {
                name: 'Ursulla',
                string_img: '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'
            },
            date: randomDate(new Date(2018, 09, 1), new Date(2018, 09, 30))
        })
    }

    [error, result] = await to(Entry.create(entries));

    if (error) return ReE(res, { message: error });
    else req.entries = result;

    next();
}
module.exports.generateEntry = generateEntry;

const generatePassing = async function (req, res, next) {
    let data = req.body;
    let passing = [];
    
    for (let i = 0; i < data.passingNumber; i++) {
        passing.push({
            image: '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',
            date: randomDate(new Date(2018, 09, 1), new Date(2018, 09, 30))
        });
    }

    [error, result] = await to(Passing.create(passing));

    if (error) return ReE(res, { message: error });
    else return ReS(res, { entries: req.entries, passing: result });
}
module.exports.generatePassing = generatePassing;